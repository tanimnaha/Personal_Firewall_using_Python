"""
Unit tests for the vulnerability scanner
"""
import unittest
import sys
import os
import json
from unittest.mock import patch, Mock

# Add the parent directory to sys.path to import our modules
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scanner import VulnerabilityScanner

class TestVulnerabilityScanner(unittest.TestCase):
    
    def setUp(self):
        self.scanner = VulnerabilityScanner()
    
    def test_scanner_initialization(self):
        """Test that scanner initializes with correct payloads"""
        self.assertIsInstance(self.scanner.xss_payloads, list)
        self.assertIsInstance(self.scanner.sql_payloads, list)
        self.assertGreater(len(self.scanner.xss_payloads), 0)
        self.assertGreater(len(self.scanner.sql_payloads), 0)
    
    def test_extract_form_data(self):
        """Test form data extraction"""
        # Mock HTML form
        html_content = '''
        <html>
        <body>
        <form action="/login" method="post">
            <input type="text" name="username" value="">
            <input type="password" name="password" value="">
            <input type="submit" value="Login">
        </form>
        </body>
        </html>
        '''
        
        from bs4 import BeautifulSoup
        soup = BeautifulSoup(html_content, 'html.parser')
        form = soup.find('form')
        
        form_data = self.scanner._extract_form_data(form, 'http://example.com')
        
        self.assertIsNotNone(form_data)
        self.assertEqual(form_data['method'], 'post')
        self.assertEqual(len(form_data['inputs']), 2)  # username and password, not submit
    
    @patch('requests.Session.get')
    def test_check_security_headers(self, mock_get):
        """Test security headers checking"""
        # Mock response without security headers
        mock_response = Mock()
        mock_response.headers = {}
        mock_get.return_value = mock_response
        
        vulnerabilities = self.scanner.check_security_headers('http://example.com')
        
        # Should find 5 missing security headers
        self.assertEqual(len(vulnerabilities), 5)
        self.assertTrue(all(vuln['type'] == 'Security Headers' for vuln in vulnerabilities))
    
    def test_csrf_protection_check(self):
        """Test CSRF protection checking"""
        # Form without CSRF token
        form_data = {
            'url': 'http://example.com/form',
            'method': 'post',
            'inputs': [
                {'name': 'username', 'type': 'text', 'value': ''},
                {'name': 'password', 'type': 'password', 'value': ''}
            ]
        }
        
        vulnerabilities = self.scanner.check_csrf_protection(form_data)
        
        self.assertEqual(len(vulnerabilities), 1)
        self.assertEqual(vulnerabilities[0]['type'], 'CSRF')
        self.assertEqual(vulnerabilities[0]['severity'], 'Medium')
    
    def test_csrf_protection_with_token(self):
        """Test CSRF protection with valid token"""
        # Form with CSRF token
        form_data = {
            'url': 'http://example.com/form',
            'method': 'post',
            'inputs': [
                {'name': 'username', 'type': 'text', 'value': ''},
                {'name': 'csrf_token', 'type': 'hidden', 'value': 'abc123'}
            ]
        }
        
        vulnerabilities = self.scanner.check_csrf_protection(form_data)
        
        # Should not find CSRF vulnerability
        self.assertEqual(len(vulnerabilities), 0)

class TestScanResults(unittest.TestCase):
    
    def setUp(self):
        self.scanner = VulnerabilityScanner()
    
    def test_scan_results_structure(self):
        """Test that scan results have correct structure"""
        # Mock a scan result
        scan_result = {
            'url': 'http://example.com',
            'scan_time': '2025-01-01T12:00:00',
            'vulnerabilities': [],
            'summary': {
                'total_vulnerabilities': 0,
                'critical': 0,
                'high': 0,
                'medium': 0,
                'low': 0
            }
        }
        
        # Verify structure
        self.assertIn('url', scan_result)
        self.assertIn('scan_time', scan_result)
        self.assertIn('vulnerabilities', scan_result)
        self.assertIn('summary', scan_result)
        
        summary = scan_result['summary']
        self.assertIn('total_vulnerabilities', summary)
        self.assertIn('critical', summary)
        self.assertIn('high', summary)
        self.assertIn('medium', summary)
        self.assertIn('low', summary)

if __name__ == '__main__':
    unittest.main()
