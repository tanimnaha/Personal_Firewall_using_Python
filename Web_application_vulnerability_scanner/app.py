from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
import json
import os
from datetime import datetime
from scanner import VulnerabilityScanner
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)
app.secret_key = 'your-secret-key-change-in-production'

# Create data directory if it doesn't exist
if not os.path.exists('data'):
    os.makedirs('data')

def save_scan_result(scan_result):
    """Save scan result to JSON file"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"data/scan_{timestamp}.json"
    
    with open(filename, 'w') as f:
        json.dump(scan_result, f, indent=2)
    
    return filename

def load_scan_results():
    """Load all scan results from data directory"""
    scan_results = []
    
    if os.path.exists('data'):
        for filename in os.listdir('data'):
            if filename.startswith('scan_') and filename.endswith('.json'):
                try:
                    with open(os.path.join('data', filename), 'r') as f:
                        scan_data = json.load(f)
                        scan_data['filename'] = filename
                        scan_results.append(scan_data)
                except Exception as e:
                    logging.error(f"Error loading {filename}: {str(e)}")
    
    # Sort by scan time (newest first)
    scan_results.sort(key=lambda x: x.get('scan_time', ''), reverse=True)
    return scan_results

@app.route('/')
def index():
    """Home page with scan form"""
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    """Perform vulnerability scan"""
    url = request.form.get('url', '').strip()
    max_depth = int(request.form.get('max_depth', 2))
    
    if not url:
        flash('Please enter a valid URL', 'error')
        return redirect(url_for('index'))
    
    # Add http:// if no protocol specified
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url
    
    try:
        scanner = VulnerabilityScanner()
        scan_result = scanner.scan_website(url, max_depth)
        
        # Save scan result
        filename = save_scan_result(scan_result)
        
        flash(f'Scan completed! Found {scan_result["summary"]["total_vulnerabilities"]} vulnerabilities', 'success')
        return redirect(url_for('results', filename=os.path.basename(filename)))
        
    except Exception as e:
        flash(f'Scan failed: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/results')
def results_list():
    """List all scan results"""
    scan_results = load_scan_results()
    return render_template('results_list.html', scan_results=scan_results)

@app.route('/results/<filename>')
def results(filename):
    """View specific scan results"""
    try:
        with open(os.path.join('data', filename), 'r') as f:
            scan_result = json.load(f)
        
        return render_template('results.html', scan_result=scan_result, filename=filename)
        
    except Exception as e:
        flash(f'Error loading scan results: {str(e)}', 'error')
        return redirect(url_for('results_list'))

@app.route('/api/scan', methods=['POST'])
def api_scan():
    """API endpoint for scanning"""
    data = request.get_json()
    
    if not data or 'url' not in data:
        return jsonify({'error': 'URL is required'}), 400
    
    url = data['url']
    max_depth = data.get('max_depth', 2)
    
    # Add http:// if no protocol specified
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url
    
    try:
        scanner = VulnerabilityScanner()
        scan_result = scanner.scan_website(url, max_depth)
        
        # Save scan result
        filename = save_scan_result(scan_result)
        scan_result['filename'] = os.path.basename(filename)
        
        return jsonify(scan_result)
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/results')
def api_results():
    """API endpoint to get all scan results"""
    scan_results = load_scan_results()
    return jsonify(scan_results)

@app.route('/delete/<filename>')
def delete_scan(filename):
    """Delete a scan result"""
    try:
        file_path = os.path.join('data', filename)
        if os.path.exists(file_path):
            os.remove(file_path)
            flash('Scan result deleted successfully', 'success')
        else:
            flash('Scan result not found', 'error')
    except Exception as e:
        flash(f'Error deleting scan result: {str(e)}', 'error')
    
    return redirect(url_for('results_list'))

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
